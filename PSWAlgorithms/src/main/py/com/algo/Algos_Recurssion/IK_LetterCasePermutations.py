'''
Given a string, return all strings that can be generated by changing case of one or more
 letters in it.

Example One
{
"s": "a1z"
}
Output:

["A1Z", "A1z", "a1Z", "a1z"]
Example Two
{
"s": "123"
}
Output:

["123"]
Notes
Return strings in any order.

Constraints:

Input string may contain only: 'a'..'z', 'A'..'Z', '0'..'9'
1 <= length of the string <= 12
'''

class Solution:
    def letter_case_permutations(s):
        """
        Args:
         s(str)
        Returns:
         list_str
        """
        # Write your code here.
        result = []

        def helper(sol, i):
            if i == len(s):
                result.append("".join(elem for elem in sol))
                return
            else:
                if s[i].isdigit():
                    sol.append(s[i])
                    helper(sol, i + 1)
                    sol.pop()
                else:
                    sol.append(s[i].lower())
                    helper(sol, i + 1)
                    sol.pop()

                    sol.append(s[i].upper())
                    helper(sol, i + 1)
                    sol.pop()

        helper([], 0)

        return result